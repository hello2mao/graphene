libos.entrypoint = "file:$(PYTHON3)"

# Path to the library OS
loader.preload = "file:$(GRAPHENEDIR)/Runtime/libsysdb.so"

# Graphene log level
loader.log_level = "$(GRAPHENE_LOG_LEVEL)"

# Read application arguments directly from the command line. Don't use this on production!
loader.insecure__use_cmdline_argv = 1

# Propagate environment variables from the host. Don't use this on production!
loader.insecure__use_host_env = 1

# Overwrite some environment variables
loader.env.LD_LIBRARY_PATH = "/lib:/usr/lib:$(ARCH_LIBDIR):/usr/$(ARCH_LIBDIR)"
#loader.env.PATH = "$(PYTHONHOME)/bin:/usr/bin:/bin"
#loader.env.PYTHONHOME = "$(PYTHONHOME)"
#loader.env.PYTHONPATH = "$(PYTHONHOME):$(PYTHONHOME)/plat-$(ARCH_LONG):$(PYTHONDISTHOME):$(PYTHONHOME)/lib-dynload"
#loader.env.HOME = "/home/user"

# Mounted FSes. The following "chroot" FSes mount a part of the host FS into the
# guest. Other parts of the host FS will not be available in the guest.

# Default glibc files, mounted from the Runtime directory in GRAPHENEDIR
fs.mount.lib.type = "chroot"
fs.mount.lib.path = "/lib"
fs.mount.lib.uri = "file:$(GRAPHENEDIR)/Runtime/"

# Host-level libraries (e.g., /lib/x86_64-linux-gnu) required by the Python executable
fs.mount.lib2.type = "chroot"
fs.mount.lib2.path = "$(ARCH_LIBDIR)"
fs.mount.lib2.uri = "file:$(ARCH_LIBDIR)"

# Host-level directory (/usr) required by the Python executable
fs.mount.usr.type = "chroot"
fs.mount.usr.path = "/usr"
fs.mount.usr.uri = "file:/usr"

# Mount /etc
fs.mount.etc.type = "chroot"
fs.mount.etc.path = "/etc"
fs.mount.etc.uri = "file:/etc"

# Mount /tmp
fs.mount.tmp.type = "chroot"
fs.mount.tmp.path = "/tmp"
fs.mount.tmp.uri = "file:/tmp"

# Mount $PYTHONDISTHOME
#fs.mount.pydisthome.type = "chroot"
#fs.mount.pydisthome.path = "$(PYTHONDISTHOME)"
#fs.mount.pydisthome.uri = "file:$(PYTHONDISTHOME)"

# When run as `pip install --user ...`, pip installs Python packages here
fs.mount.pip.type = "chroot"
fs.mount.pip.path = "$(HOME)/.local/lib"
fs.mount.pip.uri = "file:$(HOME)/.local/lib"

# Graphene general options

# Graphene creates stacks of 256KB by default. It is not enough for SciPy/NumPy
# packages, e.g., libopenblas dependency assumes more than 512KB-sized stacks.
sys.stack.size = "8M"

# With fs.root Graphene's working directory is '/', setting fs.start_dir changes the
# working directory to the desired location
#fs.start_dir = "/app/"

# Start at static addresses (otherwise breaks when static and PIE executables are used)
#sgx.static_address = 1

# SGX general options

# Set the virtual memory size of the SGX enclave. For SGX v1, the enclave
# size must be specified during signing. If the workload needs more virtual memory
# than the enclave size, Graphene will not be able to allocate it.
sgx.enclave_size = "4G"

# Set the maximum number of enclave threads. For SGX v1, the number of enclave
# TCSes must be specified during signing, so the application cannot use more
# threads than the number of TCSes. Note that Graphene also creates an internal
# thread for handling inter-process communication (IPC), and potentially another
# thread for asynchronous events. Therefore, the actual number of threads that
# the application can create is (sgx.thread_num - 2).
sgx.thread_num = 100

# SGX trusted libraries
sgx.trusted_files.ld          = "file:$(GRAPHENEDIR)/Runtime/ld-linux-x86-64.so.2"
sgx.trusted_files.libc        = "file:$(GRAPHENEDIR)/Runtime/libc.so.6"
sgx.trusted_files.libdl       = "file:$(GRAPHENEDIR)/Runtime/libdl.so.2"
sgx.trusted_files.libm        = "file:$(GRAPHENEDIR)/Runtime/libm.so.6"
sgx.trusted_files.libpthread  = "file:$(GRAPHENEDIR)/Runtime/libpthread.so.0"
sgx.trusted_files.libresolv   = "file:$(GRAPHENEDIR)/Runtime/libresolv.so.2"
sgx.trusted_files.librt       = "file:$(GRAPHENEDIR)/Runtime/librt.so.1"
sgx.trusted_files.libutil     = "file:$(GRAPHENEDIR)/Runtime/libutil.so.1"
sgx.trusted_files.libnssdns   = "file:$(GRAPHENEDIR)/Runtime/libnss_dns.so.2"

sgx.trusted_files.libstdc     = "file:/usr/$(ARCH_LIBDIR)/libstdc++.so.6"
sgx.trusted_files.libgccs     = "file:$(ARCH_LIBDIR)/libgcc_s.so.1"
sgx.trusted_files.libaptpkg   = "file:/usr/$(ARCH_LIBDIR)/libapt-pkg.so.5.0"
sgx.trusted_files.liblz4      = "file:/usr/$(ARCH_LIBDIR)/liblz4.so.1"
sgx.trusted_files.libsystemd  = "file:$(ARCH_LIBDIR)/libsystemd.so.0"
sgx.trusted_files.libselinux  = "file:$(ARCH_LIBDIR)/libselinux.so.1"
sgx.trusted_files.libgcrypt   = "file:$(ARCH_LIBDIR)/libgcrypt.so.20"
sgx.trusted_files.libpcre     = "file:$(ARCH_LIBDIR)/libpcre.so.3"
sgx.trusted_files.libgpgerror = "file:$(ARCH_LIBDIR)/libgpg-error.so.0"
sgx.trusted_files.libexpat    = "file:$(ARCH_LIBDIR)/libexpat.so.1"
sgx.trusted_files.libz        = "file:$(ARCH_LIBDIR)/libz.so.1"
sgx.trusted_files.libz2       = "file:$(ARCH_LIBDIR)/libbz2.so.1.0"
sgx.trusted_files.liblzma     = "file:$(ARCH_LIBDIR)/liblzma.so.5"
sgx.trusted_files.libmpdec    = "file:/usr/$(ARCH_LIBDIR)/libmpdec.so.2"
sgx.trusted_files.libjpeg    = "file:/usr/$(ARCH_LIBDIR)/libjpeg.so.8"
sgx.trusted_files.libzstd    = "file:/usr/$(ARCH_LIBDIR)/libzstd.so.1"
sgx.trusted_files.libtiff    = "file:/usr/$(ARCH_LIBDIR)/libtiff.so.5"
sgx.trusted_files.libudev    = "file:$(ARCH_LIBDIR)/libudev.so.1"
sgx.trusted_files.libjbig    = "file:/usr/$(ARCH_LIBDIR)/libjbig.so.0"

sgx.trusted_files.collect2    = "file:/usr/lib/gcc/x86_64-linux-gnu/7/collect2"
sgx.trusted_files.libbfd    = "file:/usr/$(ARCH_LIBDIR)/libbfd-2.30-system.so"
sgx.trusted_files.libltoplugin    = "file:/usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so"
sgx.trusted_files.libuuid    = "file:/usr/$(ARCH_LIBDIR)/libuuid.so"
sgx.trusted_files.libuuida    = "file:/usr/$(ARCH_LIBDIR)/libuuid.a"

# Ubuntu16.04 sgx.trusted_files.libcrypto = "file:$(ARCH_LIBDIR)/libcrypto.so.1.0.0"
# Ubuntu16.04 sgx.trusted_files.libssl    = "file:$(ARCH_LIBDIR)/libssl.so.1.0.0"
# Ubuntu18.04 sgx.trusted_files.libcrypto = "file:/usr/$(ARCH_LIBDIR)/libcrypto.so.1.1"
# Ubuntu18.04 sgx.trusted_files.libssl    = "file:/usr/$(ARCH_LIBDIR)/libssl.so.1.1"

# Name Service Switch (NSS) libraries (Glibc dependencies)
sgx.trusted_files.libnssfiles = "file:$(ARCH_LIBDIR)/libnss_files.so.2"
sgx.trusted_files.libnsscompat = "file:$(ARCH_LIBDIR)/libnss_compat.so.2"
sgx.trusted_files.libnssnis = "file:$(ARCH_LIBDIR)/libnss_nis.so.2"
sgx.trusted_files.libnsl = "file:$(ARCH_LIBDIR)/libnsl.so.1"
sgx.trusted_files.libnssmyhostname = "file:$(ARCH_LIBDIR)/libnss_myhostname.so.2"
sgx.trusted_files.libnssmdns = "file:$(ARCH_LIBDIR)/libnss_mdns4_minimal.so.2"

# required by Python package ctypes (lib/python3.6/lib-dynload/ctypes.cpython-36m-x86_64-linux-gnu.so)
# Ubuntu18.04 sgx.trusted_files.libffi = "file:/usr/$(ARCH_LIBDIR)/libffi.so.6"

# Scratch space
sgx.allowed_files.tmp = "file:/tmp"

# The workload needs to fork/execve; this allows it to do so
sgx.trusted_children.fork = "file:python3_child.sig"

# Various locations where Python dependencies are found
sgx.allowed_files.python3 = "file:/usr/lib/python3"
sgx.allowed_files.pythonhome = "file:$(HOME)/.local/lib"
# Ubuntu16.04 sgx.allowed_files.python35 = "file:/usr/lib/python3.5"
# Ubuntu18.04 sgx.allowed_files.python36 = "file:/usr/lib/python3.6"
# Ubuntu16.04 sgx.allowed_files.python35local = "file:/usr/local/lib/python3.5"
# Ubuntu18.04 sgx.allowed_files.python36local = "file:/usr/local/lib/python3.6"

# APT config files
sgx.allowed_files.aptconfd = "file:/etc/apt/apt.conf.d"
sgx.allowed_files.aptconf = "file:/etc/apt/apt.conf"
sgx.allowed_files.apport = "file:/etc/default/apport"

# Name Service Switch (NSS) files (Glibc reads these files)
sgx.allowed_files.nsswitch = "file:/etc/nsswitch.conf"
sgx.allowed_files.group = "file:/etc/group"
sgx.allowed_files.passwd = "file:/etc/passwd"

# DNS hostname resolution files (Glibc reads these files)
sgx.allowed_files.hostconf = "file:/etc/host.conf"
sgx.allowed_files.hosts = "file:/etc/hosts"
sgx.allowed_files.gaiconf = "file:/etc/gai.conf"
sgx.allowed_files.resolv = "file:/etc/resolv.conf"

# System's file system table
sgx.allowed_files.fstab = "file:/etc/fstab"

sgx.nonpie_binary = 1

# Other
sgx.trusted_files.cputable = "file:/usr/share/dpkg/cputable"
sgx.allowed_files.cpu_online = "file:/sys/devices/system/cpu/online"
sgx.allowed_files.usr_bin = "file:/usr/bin"

# The script to run
sgx.trusted_files.script = "file:kmeans.py"
